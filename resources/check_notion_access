import os
import argparse
from dotenv import load_dotenv
from notion_client import Client
from notion_client.errors import APIResponseError

load_dotenv()

def normalize_id(raw_id: str) -> str:
    """Acepta IDs con o sin guiones y los normaliza a 32+4+4+4+12."""
    rid = raw_id.replace("-", "")
    if len(rid) != 32:
        return raw_id  # lo devolvemos tal cual; Notion lo validar√°
    return f"{rid[0:8]}-{rid[8:12]}-{rid[12:16]}-{rid[16:20]}-{rid[20:32]}"

def extract_title_from_page(page: dict) -> str:
    """Intenta extraer el t√≠tulo de una p√°gina Notion."""
    props = page.get("properties", {})
    for _, prop in props.items():
        if prop.get("type") == "title":
            return "".join([t["plain_text"] for t in prop.get("title", [])]).strip() or "(sin t√≠tulo)"
    return "(sin t√≠tulo)"

def check_access(notion: Client, block_id: str) -> None:
    # 1) Intentamos como p√°gina
    try:
        page = notion.pages.retrieve(block_id)
        title = extract_title_from_page(page)
        print(f"‚úÖ Acceso OK (p√°gina)\n‚Ä¢ ID: {block_id}\n‚Ä¢ T√≠tulo: {title}")
        return
    except APIResponseError as e:
        if e.code not in ("object_not_found", "validation_error"):
            # Por ejemplo unauthorized, rate_limited, etc.
            print(f"‚ùå Error accediendo como p√°gina: {e.code} - {getattr(e, 'message', '')}")
        # Si es object_not_found/validation_error seguimos probando database

    # 2) Intentamos como base de datos
    try:
        db = notion.databases.retrieve(block_id)
        title = "".join([t["plain_text"] for t in db.get("title", [])]).strip() or "(sin t√≠tulo)"
        print(f"‚úÖ Acceso OK (base de datos)\n‚Ä¢ ID: {block_id}\n‚Ä¢ T√≠tulo: {title}")
        return
    except APIResponseError as e:
        msg = getattr(e, "message", "")
        if e.code == "object_not_found":
            print(
                "‚ùå No se encontr√≥ el bloque o no est√° compartido con tu integraci√≥n.\n"
                "   ‚Üí Abre la p√°gina/base de datos en Notion > Share > Invita a tu integraci√≥n.\n"
                f"   Detalle: {msg}"
            )
        elif e.code in ("unauthorized", "restricted_resource"):
            print(
                "üîí Token inv√°lido o sin permisos.\n"
                "   ‚Üí Revisa NOTION_TOKEN en tu .env y que la p√°gina est√© compartida con la integraci√≥n."
            )
        else:
            print(f"‚ùå Error: {e.code} - {msg}")

def main():
    parser = argparse.ArgumentParser(description="Comprueba el acceso de tu integraci√≥n de Notion a un page_id/database_id.")
    parser.add_argument("id", help="ID de p√°gina o base de datos de Notion (con o sin guiones)")
    args = parser.parse_args()

    notion_token = os.getenv("NOTION_TOKEN")
    if not notion_token:
        print("‚ùå NOTION_TOKEN no encontrado. Define NOTION_TOKEN en tu .env o en variables de entorno.")
        return

    block_id = normalize_id(args.id)
    notion = Client(auth=notion_token)

    print(f"üîé Comprobando acceso al ID: {block_id}")
    check_access(notion, block_id)

if __name__ == "__main__":
    main()
